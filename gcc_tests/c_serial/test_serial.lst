   1              		.file	"test_serial.c"
   2              		.option nopic
   3              	# GNU C17 (GCC) version 8.2.0 (riscv32-unknown-elf)
   4              	#	compiled by GNU C version 7.5.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl ve
   5              	# GGC heuristics: --param ggc-min-expand=30 --param ggc-min-heapsize=4096
   6              	# options passed:  test_serial.c -march=rv32imc -mabi=ilp32
   7              	# -auxbase-strip test_serial.s -g -O0 -fverbose-asm
   8              	# options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
   9              	# -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  10              	# -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  11              	# -fchkp-store-bounds -fchkp-use-static-bounds
  12              	# -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  13              	# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
  14              	# -feliminate-unused-debug-types -ffp-int-builtin-inexact -ffunction-cse
  15              	# -fgcse-lm -fgnu-runtime -fgnu-unique -fident -finline-atomics
  16              	# -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  17              	# -fivopts -fkeep-static-consts -fleading-underscore -flifetime-dse
  18              	# -flto-odr-type-merging -fmath-errno -fmerge-debug-strings -fpeephole
  19              	# -fplt -fprefetch-loop-arrays -freg-struct-return
  20              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  21              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  22              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  23              	# -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
  24              	# -fshow-column -fshrink-wrap-separate -fsigned-zeros
  25              	# -fsplit-ivs-in-unroller -fssa-backprop -fstdarg-opt
  26              	# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  27              	# -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  28              	# -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  29              	# -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  30              	# -fzero-initialized-in-bss -mdiv -mexplicit-relocs -mplt -mstrict-align
  31              	
  32              		.text
  33              	.Ltext0:
  34              		.cfi_sections	.debug_frame
  35              		.align	1
  36              		.globl	irq
  38              	irq:
  39              	.LFB0:
  40              		.file 1 "test_serial.c"
   1:test_serial.c **** //test_irq.c
   2:test_serial.c **** 
   3:test_serial.c **** #include <stdint.h>
   4:test_serial.c **** #include <stdbool.h>
   5:test_serial.c **** #include "../common/vargen.h"
   6:test_serial.c **** #include "../common/eusart1.h"
   7:test_serial.c **** 
   8:test_serial.c **** //extern uint32_t sram;
   9:test_serial.c **** 
  10:test_serial.c **** void irq(uint32_t irqs)
  11:test_serial.c **** {
  41              		.loc 1 11 1
  42              		.cfi_startproc
  43 0000 130101FE 		addi	sp,sp,-32	#,,
  44              		.cfi_def_cfa_offset 32
  45 0004 232E8100 		sw	s0,28(sp)	#,
  46              		.cfi_offset 8, -4
  47 0008 13040102 		addi	s0,sp,32	#,,
  48              		.cfi_def_cfa 8, 0
  49 000c 2326A4FE 		sw	a0,-20(s0)	# irqs, irqs
  50              	# test_serial.c:12: 	if (irqs & IRQ_5) {
  12:test_serial.c **** 	if (irqs & IRQ_5) {
  51              		.loc 1 12 11
  52 0010 8327C4FE 		lw	a5,-20(s0)		# tmp78, irqs
  53 0014 93F70702 		andi	a5,a5,32	#, _1, tmp78
  54              	# test_serial.c:12: 	if (irqs & IRQ_5) {
  55              		.loc 1 12 5
  56 0018 63880700 		beqz	a5,.L2	#, _1,
  57              	# test_serial.c:13: 		reg_porta = IRQ_5;
  13:test_serial.c **** 		reg_porta = IRQ_5;
  58              		.loc 1 13 3
  59 001c B7071000 		li	a5,1048576		# _2,
  60              	# test_serial.c:13: 		reg_porta = IRQ_5;
  61              		.loc 1 13 13
  62 0020 13070002 		li	a4,32		# tmp79,
  63 0024 23A0E700 		sw	a4,0(a5)	# tmp79, *_2
  64              	.L2:
  65              	# test_serial.c:16: 	if (irqs & IRQ_6) {
  14:test_serial.c **** 	} 
  15:test_serial.c **** 	
  16:test_serial.c **** 	if (irqs & IRQ_6) {
  66              		.loc 1 16 11
  67 0028 8327C4FE 		lw	a5,-20(s0)		# tmp80, irqs
  68 002c 93F70704 		andi	a5,a5,64	#, _3, tmp80
  69              	# test_serial.c:16: 	if (irqs & IRQ_6) {
  70              		.loc 1 16 5
  71 0030 63880700 		beqz	a5,.L3	#, _3,
  72              	# test_serial.c:17: 		reg_porta = IRQ_6;		
  17:test_serial.c **** 		reg_porta = IRQ_6;		
  73              		.loc 1 17 3
  74 0034 B7071000 		li	a5,1048576		# _4,
  75              	# test_serial.c:17: 		reg_porta = IRQ_6;		
  76              		.loc 1 17 13
  77 0038 13070004 		li	a4,64		# tmp81,
  78 003c 23A0E700 		sw	a4,0(a5)	# tmp81, *_4
  79              	.L3:
  80              	# test_serial.c:20: 	if (irqs & IRQ_7) {
  18:test_serial.c **** 	}
  19:test_serial.c **** 
  20:test_serial.c **** 	if (irqs & IRQ_7) {
  81              		.loc 1 20 11
  82 0040 8327C4FE 		lw	a5,-20(s0)		# tmp82, irqs
  83 0044 93F70708 		andi	a5,a5,128	#, _5, tmp82
  84              	# test_serial.c:20: 	if (irqs & IRQ_7) {
  85              		.loc 1 20 5
  86 0048 63880700 		beqz	a5,.L5	#, _5,
  87              	# test_serial.c:21: 		reg_porta = IRQ_7;
  21:test_serial.c **** 		reg_porta = IRQ_7;
  88              		.loc 1 21 3
  89 004c B7071000 		li	a5,1048576		# _6,
  90              	# test_serial.c:21: 		reg_porta = IRQ_7;
  91              		.loc 1 21 13
  92 0050 13070008 		li	a4,128		# tmp83,
  93 0054 23A0E700 		sw	a4,0(a5)	# tmp83, *_6
  94              	.L5:
  95              	# test_serial.c:24: }
  22:test_serial.c **** 	}		
  23:test_serial.c **** 	
  24:test_serial.c **** }
  96              		.loc 1 24 1
  97 0058 13000000 		nop	
  98 005c 0324C101 		lw	s0,28(sp)		#,
  99              		.cfi_restore 8
 100 0060 13010102 		addi	sp,sp,32	#,,
 101              		.cfi_def_cfa_register 2
 102 0064 67800000 		jr	ra		#
 103              		.cfi_endproc
 104              	.LFE0:
 106              		.align	1
 107              		.globl	main
 109              	main:
 110              	.LFB1:
  25:test_serial.c **** 
  26:test_serial.c **** 
  27:test_serial.c **** void main() 
  28:test_serial.c **** {
 111              		.loc 1 28 1
 112              		.cfi_startproc
 113 0068 130101FE 		addi	sp,sp,-32	#,,
 114              		.cfi_def_cfa_offset 32
 115 006c 232E8100 		sw	s0,28(sp)	#,
 116              		.cfi_offset 8, -4
 117 0070 13040102 		addi	s0,sp,32	#,,
 118              		.cfi_def_cfa 8, 0
 119              	# test_serial.c:32: 	reg_uart_conf = UART_CONF;
  29:test_serial.c **** 	unsigned char flag;	
  30:test_serial.c **** 	unsigned char aux,rec;
  31:test_serial.c **** 	
  32:test_serial.c **** 	
 120              		.loc 1 32 2
 121 0074 B7071000 		li	a5,1048576		# tmp73,
 122 0078 93870701 		addi	a5,a5,16	#, _1, tmp73
 123              	# test_serial.c:32: 	reg_uart_conf = UART_CONF;
 124              		.loc 1 32 16
 125 007c 13072068 		li	a4,1666		# tmp74,
 126 0080 23A0E700 		sw	a4,0(a5)	# tmp74, *_1
 127              	# test_serial.c:34: 	aux = 0xab;
  33:test_serial.c **** 	reg_intcon_bits->RXIE = 1;
  34:test_serial.c **** 	reg_intcon_bits->TXIE = 1;
 128              		.loc 1 34 6
 129 0084 9307B0FA 		li	a5,-85		# tmp75,
 130 0088 A307F4FE 		sb	a5,-17(s0)	# tmp75, aux
 131              	# test_serial.c:53: 	alfa.RXIF = 1;
  35:test_serial.c **** 	
  36:test_serial.c **** 	//volatile INTCON_bits_s *beta;
  37:test_serial.c **** 	
  38:test_serial.c **** 	//alfa.INTCON_reg = (uint32_t*)(INTCON);
  39:test_serial.c **** 	//alfa.INTCON_bits->RXIF = 1;
  40:test_serial.c **** 	
  41:test_serial.c **** 	//beta = (INTCON_bits_s*)(0x00100014);
  42:test_serial.c **** 	//beta->RXIF = 0;
  43:test_serial.c **** 		
  44:test_serial.c **** 	//reg_porta = 0xab;
  45:test_serial.c **** 	
  46:test_serial.c **** 	//reg_uart_conf = UART_CONF_VAL;
  47:test_serial.c **** 	
  48:test_serial.c **** 	//aux = 0xab;
  49:test_serial.c **** 		/*
  50:test_serial.c **** 	while(1) {
  51:test_serial.c **** 		flag = (unsigned char)(reg_intflags & UART_TX_IF);
  52:test_serial.c **** 		if (flag) {
  53:test_serial.c **** 			reg_uart_tx = aux++;
 132              		.loc 1 53 12
 133 008c 834784FE 		lbu	a5,-24(s0)	# tmp77, alfa.D.1566.RXIF
 134 0090 93E71700 		ori	a5,a5,1	#, tmp78, tmp77
 135 0094 2304F4FE 		sb	a5,-24(s0)	# tmp79, alfa.D.1566.RXIF
 136              	.L7:
 137              	# test_serial.c:56: 		alfa.RXIF = 1;
  54:test_serial.c **** 		}
  55:test_serial.c **** 		
  56:test_serial.c **** 		flag = (unsigned char)(reg_intflags & UART_RX_IF);
 138              		.loc 1 56 13 discriminator 1
 139 0098 834784FE 		lbu	a5,-24(s0)	# tmp81, alfa.D.1566.RXIF
 140 009c 93E71700 		ori	a5,a5,1	#, tmp82, tmp81
 141 00a0 2304F4FE 		sb	a5,-24(s0)	# tmp83, alfa.D.1566.RXIF
 142              	# test_serial.c:57: 		alfa.RXIF = 0;
  57:test_serial.c **** 		if (flag) {
 143              		.loc 1 57 13 discriminator 1
 144 00a4 834784FE 		lbu	a5,-24(s0)	# tmp85, alfa.D.1566.RXIF
 145 00a8 93F7E7FF 		andi	a5,a5,-2	#, tmp86, tmp85
 146 00ac 2304F4FE 		sb	a5,-24(s0)	# tmp87, alfa.D.1566.RXIF
 147              	# test_serial.c:56: 		alfa.RXIF = 1;
  56:test_serial.c **** 		if (flag) {
 148              		.loc 1 56 13 discriminator 1
 149 00b0 6FF09FFE 		j	.L7		#
 150              		.cfi_endproc
 151              	.LFE1:
 153              	.Letext0:
 154              		.file 2 "/opt/riscv32i/riscv32-unknown-elf/include/machine/_default_types.h"
 155              		.file 3 "/opt/riscv32i/riscv32-unknown-elf/include/sys/_stdint.h"
 156              		.file 4 "../common/vargen.h"
