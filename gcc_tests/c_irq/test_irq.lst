   1              	# 1 "../common/start.S"
   1              	//start.S
   1              	...
   0              	
   0              	
   2              	
   3              	#include "custom_ops.S"
   1              	// This is free and unencumbered software released into the public domain.
   4              	
   5              				.section .data
   6              				.balign 4
   7              	
   8 0000 00       	flag_isr:	.byte	0  //this flag is used as workaround to avoid isr re-entry
   9              	
  10              				.section .text
  11              				.global irq
  12              		
  13              	reset_vec:
  14 0000 0B600006 				picorv32_maskirq_insn(zero, zero)	//activate interrups
  15 0004 E9A0     				j start
  16              				
  17              	
  18              			   /*
  19              			    * Interrupt handler
  20              			    */
  21 0006 01001300 				.balign 16
  21      00001300 
  21      00001300 
  21      0000
  22              				
  23              	irq_vec:	
  24              				/* check status of flag_isr */
  25              			
  26 0014 97020000 				la t0, flag_isr
  26      93820200 
  27 001c 03A50200 				lw a0,0(t0)
  28 0020 630A0500 				beq a0,zero,1f   //if (flag_isr == 0) { jump 1: } else {
  29              		
  30              				//re-entering isr, clear flag and jump to exit
  31 0024 0145     				li a0, 00
  32 0026 97020000 				la t0, flag_isr
  32      93820200 
  33 002e 23A0A200 				sw a0,0(t0)
  34 0032 61A8     				j 2f
  35              	
  36              	1:			/* set flag_isr */
  37 0034 0545     				li a0, 1
  38 0036 97020000 				la t0, flag_isr
  38      93820200 
  39 003e 23A0A200 				sw a0,0(t0)
  40              	
  41              				/*Save registers*/
  42              				
  43              				//picorv32_setq_insn(q2, x1)	// q2 = ra
  44              				//picorv32_setq_insn(q3, x2)	// q3 = sp
  45              				
  46 0042 1971     				addi sp, sp, -128
  47              				
  48 0044 06C0     				sw x1, 0*4(sp) //ra
  49 0046 0AC2     				sw x2, 1*4(sp) //sp TODO: is it needed at all?
  50 0048 0EC4     				sw x3, 2*4(sp)
  51 004a 12C6     				sw x4, 3*4(sp)
  52 004c 16C8     				sw x5, 4*4(sp)
  53 004e 1ACA     				sw x6, 5*4(sp)
  54 0050 1ECC     				sw x7, 6*4(sp)
  55 0052 22CE     				sw x8, 7*4(sp)
  56 0054 26D0     				sw x9, 8*4(sp)
  57 0056 2AD2     				sw x10, 9*4(sp)
  58 0058 2ED4     				sw x11, 10*4(sp)
  59 005a 32D6     				sw x12, 11*4(sp)
  60 005c 36D8     				sw x13, 12*4(sp)
  61 005e 3ADA     				sw x14, 13*4(sp)
  62 0060 3EDC     				sw x15, 14*4(sp)
  63 0062 42DE     				sw x16, 15*4(sp)
  64 0064 C6C0     				sw x17, 16*4(sp)
  65 0066 CAC2     				sw x18, 17*4(sp)
  66 0068 CEC4     				sw x19, 18*4(sp)
  67 006a D2C6     				sw x20, 19*4(sp)
  68 006c D6C8     				sw x21, 20*4(sp)
  69 006e DACA     				sw x22, 21*4(sp)
  70 0070 DECC     				sw x23, 22*4(sp)
  71 0072 E2CE     				sw x24, 23*4(sp)
  72 0074 E6D0     				sw x25, 24*4(sp)
  73 0076 EAD2     				sw x26, 25*4(sp)
  74 0078 EED4     				sw x27, 26*4(sp)
  75 007a F2D6     				sw x28, 27*4(sp)
  76 007c F6D8     				sw x29, 28*4(sp)
  77 007e FADA     				sw x30, 29*4(sp)
  78 0080 FEDC     				sw x31, 30*4(sp)
  79              				
  80              				// Call C function
  81              				
  82 0082 0BC50000 				picorv32_getq_insn(a0, q1)
  83 0086 EFF0BFF7 				jal irq
  84              				
  85              				//Restore registers
  86 008a 8240     				lw x1, 0*4(sp)
  87 008c 1241     				lw x2, 1*4(sp)
  88 008e A241     				lw x3, 2*4(sp)
  89 0090 3242     				lw x4, 3*4(sp)
  90 0092 C242     				lw x5, 4*4(sp)
  91 0094 5243     				lw x6, 5*4(sp)
  92 0096 E243     				lw x7, 6*4(sp)
  93 0098 7244     				lw x8, 7*4(sp)
  94 009a 8254     				lw x9, 8*4(sp)
  95 009c 1255     				lw x10, 9*4(sp)
  96 009e A255     				lw x11, 10*4(sp)
  97 00a0 3256     				lw x12, 11*4(sp)
  98 00a2 C256     				lw x13, 12*4(sp)
  99 00a4 5257     				lw x14, 13*4(sp)
 100 00a6 E257     				lw x15, 14*4(sp)
 101 00a8 7258     				lw x16, 15*4(sp)
 102 00aa 8648     				lw x17, 16*4(sp)
 103 00ac 1649     				lw x18, 17*4(sp)
 104 00ae A649     				lw x19, 18*4(sp)
 105 00b0 364A     				lw x20, 19*4(sp)
 106 00b2 C64A     				lw x21, 20*4(sp)
 107 00b4 564B     				lw x22, 21*4(sp)
 108 00b6 E64B     				lw x23, 22*4(sp)
 109 00b8 764C     				lw x24, 23*4(sp)
 110 00ba 865C     				lw x25, 24*4(sp)
 111 00bc 165D     				lw x26, 25*4(sp)
 112 00be A65D     				lw x27, 26*4(sp)
 113 00c0 365E     				lw x28, 27*4(sp)
 114 00c2 C65E     				lw x29, 28*4(sp)
 115 00c4 565F     				lw x30, 29*4(sp)
 116 00c6 E65F     				lw x31, 30*4(sp)
 117              										
 118 00c8 0961     				addi sp, sp, 128
 119              				
 120 00ca 0B000004 	2:			picorv32_retirq_insn()
 121              	
 122              	start:
 123              			/* zero-initialize all registers */
 124 00ce 93000000 				addi x1, zero, 0
 125              				//addi x2, zero, 0 Stack pointer is already initialized to 4*MEM_WORDS on reset
 126 00d2 93010000 				addi x3, zero, 0
 127 00d6 13020000 				addi x4, zero, 0
 128 00da 93020000 				addi x5, zero, 0
 129 00de 13030000 				addi x6, zero, 0
 130 00e2 93030000 				addi x7, zero, 0
 131 00e6 13040000 				addi x8, zero, 0
 132 00ea 93040000 				addi x9, zero, 0
 133 00ee 13050000 				addi x10, zero, 0
 134 00f2 93050000 				addi x11, zero, 0
 135 00f6 13060000 				addi x12, zero, 0
 136 00fa 93060000 				addi x13, zero, 0
 137 00fe 13070000 				addi x14, zero, 0
 138 0102 93070000 				addi x15, zero, 0
 139 0106 13080000 				addi x16, zero, 0
 140 010a 93080000 				addi x17, zero, 0
 141 010e 13090000 				addi x18, zero, 0
 142 0112 93090000 				addi x19, zero, 0
 143 0116 130A0000 				addi x20, zero, 0
 144 011a 930A0000 				addi x21, zero, 0
 145 011e 130B0000 				addi x22, zero, 0
 146 0122 930B0000 				addi x23, zero, 0
 147 0126 130C0000 				addi x24, zero, 0
 148 012a 930C0000 				addi x25, zero, 0
 149 012e 130D0000 				addi x26, zero, 0
 150 0132 930D0000 				addi x27, zero, 0
 151 0136 130E0000 				addi x28, zero, 0
 152 013a 930E0000 				addi x29, zero, 0
 153 013e 130F0000 				addi x30, zero, 0
 154 0142 930F0000 				addi x31, zero, 0
 155              	
 156              				//copy data section
 157              				
 158 0146 17050000 				la a0, _sidata
 158      13050500 
 159 014e 97050000 				la a1, _sdata
 159      93850500 
 160 0156 17060000 				la a2, _edata
 160      13060600 
 161 015e 63D8C500 				bge a1, a2, end_init_data
 162              	loop_init_data:
 163 0162 1441     				lw a3, 0(a0)
 164 0164 94C1     				sw a3, 0(a1)
 165 0166 1105     				addi a0, a0, 4
 166 0168 9105     				addi a1, a1, 4
 167 016a E3CCC5FE 				blt a1, a2, loop_init_data
 168              	end_init_data:
 169              				
 170              				// zero-init bss section
 171              				
 172 016e 17050000 				la a0, _sbss
 172      13050500 
 173 0176 97050000 				la a1, _ebss
 173      93850500 
 174 017e 6357B500 				bge a0, a1, end_init_bss
 175              	loop_init_bss:
 176 0182 23200500 				sw zero, 0(a0)
 177 0186 1105     				addi a0, a0, 4
 178 0188 E34DB5FE 				blt a0, a1, loop_init_bss
 179              	end_init_bss:
 180              				
 181              				//initialize flag_isr 
 182              				//NOTE: this has already been done in loop_init_data!
 183              				/*
 184              				li a0, 0
 185              				la t0, flag_isr
 186              				sw a0,0(t0)
 187              				*/	
 188              				
 189              				// call main
 190 018c 97000000 				call main
 190      E7800000 
 191              	loop:		
 192 0194 01A00000 				j loop
 192      00000000 
 192      00000000 
   1              		.file	"test_irq.c"
   2              		.option nopic
   3              	# GNU C17 (GCC) version 8.2.0 (riscv32-unknown-elf)
   4              	#	compiled by GNU C version 7.5.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl ve
   5              	# GGC heuristics: --param ggc-min-expand=30 --param ggc-min-heapsize=4096
   6              	# options passed:  test_irq.c -march=rv32imc -mabi=ilp32 -g -O3 -Wall
   7              	# -fverbose-asm
   8              	# options enabled:  -faggressive-loop-optimizations -falign-functions
   9              	# -falign-jumps -falign-labels -falign-loops -fauto-inc-dec
  10              	# -fbranch-count-reg -fcaller-saves -fchkp-check-incomplete-type
  11              	# -fchkp-check-read -fchkp-check-write -fchkp-instrument-calls
  12              	# -fchkp-narrow-bounds -fchkp-optimize -fchkp-store-bounds
  13              	# -fchkp-use-static-bounds -fchkp-use-static-const-bounds
  14              	# -fchkp-use-wrappers -fcode-hoisting -fcombine-stack-adjustments -fcommon
  15              	# -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  16              	# -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
  17              	# -fdevirtualize-speculatively -fdwarf2-cfi-asm -fearly-inlining
  18              	# -feliminate-unused-debug-types -fexpensive-optimizations
  19              	# -fforward-propagate -ffp-int-builtin-inexact -ffunction-cse -fgcse
  20              	# -fgcse-after-reload -fgcse-lm -fgnu-runtime -fgnu-unique
  21              	# -fguess-branch-probability -fhoist-adjacent-loads -fident -fif-conversion
  22              	# -fif-conversion2 -findirect-inlining -finline -finline-atomics
  23              	# -finline-functions -finline-functions-called-once
  24              	# -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  25              	# -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  26              	# -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  27              	# -fira-share-save-slots -fira-share-spill-slots
  28              	# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  29              	# -fleading-underscore -flifetime-dse -floop-interchange
  30              	# -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  31              	# -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  32              	# -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  33              	# -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  34              	# -fpredictive-commoning -fprefetch-loop-arrays -free -freg-struct-return
  35              	# -freorder-blocks -freorder-functions -frerun-cse-after-loop
  36              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  37              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  38              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  39              	# -fsched-stalled-insns-dep -fschedule-fusion -fschedule-insns
  40              	# -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  41              	# -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  42              	# -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  43              	# -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  44              	# -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  45              	# -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  46              	# -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  47              	# -ftree-copy-prop -ftree-dce -ftree-dominator-opts -ftree-dse
  48              	# -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  49              	# -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  50              	# -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  51              	# -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  52              	# -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  53              	# -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  54              	# -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  55              	# -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  56              	# -fzero-initialized-in-bss -mdiv -mexplicit-relocs -mplt -mstrict-align
  57              	
  58              		.text
  59              	.Ltext0:
  60              		.cfi_sections	.debug_frame
  61              		.align	1
  62              		.globl	irq
  64              	irq:
  65              	.LFB0:
  66              		.file 1 "test_irq.c"
   1:test_irq.c    **** //test_irq.c
   2:test_irq.c    **** 
   3:test_irq.c    **** #include <stdint.h>
   4:test_irq.c    **** #include <stdbool.h>
   5:test_irq.c    **** 
   6:test_irq.c    **** #include "../common/vargen.h"
   7:test_irq.c    **** 
   8:test_irq.c    **** //extern uint32_t sram;
   9:test_irq.c    **** 
  10:test_irq.c    **** void irq(uint32_t irqs) // @suppress("Type cannot be resolved")
  11:test_irq.c    **** {
  67              		.loc 1 11 1
  68              		.cfi_startproc
  69              	.LVL0:
  12:test_irq.c    **** 	if (irqs & IRQ_5) {
  70              		.loc 1 12 2
  71              	# test_irq.c:12: 	if (irqs & IRQ_5) {
  72              		.loc 1 12 11 is_stmt 0
  73 0000 93770502 		andi	a5,a0,32	#, tmp76, irqs
  74              	# test_irq.c:12: 	if (irqs & IRQ_5) {
  75              		.loc 1 12 5
  76 0004 91C7     		beqz	a5,.L2	#, tmp76,
  13:test_irq.c    **** 		reg_porta = IRQ_5;
  77              		.loc 1 13 3 is_stmt 1
  78              	# test_irq.c:13: 		reg_porta = IRQ_5;
  79              		.loc 1 13 13 is_stmt 0
  80 0006 B7071000 		li	a5,1048576		# tmp78,
  81 000a 13070002 		li	a4,32		# tmp79,
  82 000e D8CB     		sw	a4,20(a5)	# tmp79, MEM[(volatile uint32_t *)1048596B]
  83              	.L2:
  14:test_irq.c    **** 	} 
  15:test_irq.c    **** 	
  16:test_irq.c    **** 	if (irqs & IRQ_6) {
  84              		.loc 1 16 2 is_stmt 1
  85              	# test_irq.c:16: 	if (irqs & IRQ_6) {
  86              		.loc 1 16 11 is_stmt 0
  87 0010 93770504 		andi	a5,a0,64	#, tmp80, irqs
  88              	# test_irq.c:16: 	if (irqs & IRQ_6) {
  89              		.loc 1 16 5
  90 0014 91C7     		beqz	a5,.L3	#, tmp80,
  17:test_irq.c    **** 		reg_porta = IRQ_6;		
  91              		.loc 1 17 3 is_stmt 1
  92              	# test_irq.c:17: 		reg_porta = IRQ_6;		
  93              		.loc 1 17 13 is_stmt 0
  94 0016 B7071000 		li	a5,1048576		# tmp82,
  95 001a 13070004 		li	a4,64		# tmp83,
  96 001e D8CB     		sw	a4,20(a5)	# tmp83, MEM[(volatile uint32_t *)1048596B]
  97              	.L3:
  18:test_irq.c    **** 	}
  19:test_irq.c    **** 
  20:test_irq.c    **** 	if (irqs & IRQ_7) {
  98              		.loc 1 20 2 is_stmt 1
  99              	# test_irq.c:20: 	if (irqs & IRQ_7) {
 100              		.loc 1 20 11 is_stmt 0
 101 0020 13750508 		andi	a0,a0,128	#, tmp84, irqs
 102              	.LVL1:
 103              	# test_irq.c:20: 	if (irqs & IRQ_7) {
 104              		.loc 1 20 5
 105 0024 11C5     		beqz	a0,.L1	#, tmp84,
  21:test_irq.c    **** 		reg_porta = IRQ_7;
 106              		.loc 1 21 3 is_stmt 1
 107              	# test_irq.c:21: 		reg_porta = IRQ_7;
 108              		.loc 1 21 13 is_stmt 0
 109 0026 B7071000 		li	a5,1048576		# tmp86,
 110 002a 13070008 		li	a4,128		# tmp87,
 111 002e D8CB     		sw	a4,20(a5)	# tmp87, MEM[(volatile uint32_t *)1048596B]
 112              	.L1:
 113              	# test_irq.c:24: }
  22:test_irq.c    **** 	}		
  23:test_irq.c    **** 	
  24:test_irq.c    **** }
 114              		.loc 1 24 1
 115 0030 8280     		ret	
 116              		.cfi_endproc
 117              	.LFE0:
 119              		.section	.text.startup,"ax",@progbits
 120              		.align	1
 121              		.globl	main
 123              	main:
 124              	.LFB1:
  25:test_irq.c    **** 
  26:test_irq.c    **** 
  27:test_irq.c    **** void main() 
  28:test_irq.c    **** {
 125              		.loc 1 28 1 is_stmt 1
 126              		.cfi_startproc
 127              	.L16:
  29:test_irq.c    **** 	while(1) {
 128              		.loc 1 29 2 discriminator 1
  30:test_irq.c    **** 	}
 129              		.loc 1 30 2 discriminator 1
 130 0000 01A0     		j	.L16		#
 131              		.cfi_endproc
 132              	.LFE1:
 134              		.text
 135              	.Letext0:
 136              		.file 2 "/opt/riscv32i/riscv32-unknown-elf/include/machine/_default_types.h"
 137              		.file 3 "/opt/riscv32i/riscv32-unknown-elf/include/sys/_stdint.h"
 138              		.file 4 "../common/vargen.h"
